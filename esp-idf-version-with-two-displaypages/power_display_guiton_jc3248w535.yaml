esphome:
  name: PowerDisplay
  friendly_name: Guition 320x480 JC3248W535 PowerDisplay
  platformio_options:
    upload_speed: 921600
    board_build.flash_mode: dio
    board_build.f_flash: 80000000L
    board_build.f_cpu: 240000000L
  includes:
    - power_display_idf_3248_96.h

esp32:
  board: esp32-s3-devkitc-1
  flash_size: 16MB
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_SPIRAM_FETCH_INSTRUCTIONS: y
      CONFIG_SPIRAM_RODATA: y

psram:
  mode: octal
  speed: 80MHz # 120mhz is not supported and falls back to 40mhz

# Enable logging
logger:
  baud_rate: 921600

api:
  encryption:
    key: !secret api_encryption

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

spi:
  id: display_qspi
  type: quad
  clk_pin: 47
  data_pins: [21, 48, 40, 39]

i2c:
  sda: 4
  scl: 8
  id: touchscreen_bus

output:
  - platform: ledc
    pin: GPIO1
    id: backlight

light:
  - platform: monochromatic
    output: backlight
    name: "backlight Light" 
    restore_mode: ALWAYS_ON

touchscreen:
  - platform: axs15231
    id: my_touch
    display: mydisplay
    i2c_id: touchscreen_bus
    transform:
      swap_xy: true
      mirror_y: true
    on_touch:
      - lambda: |-
          ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d",
            touch.x,
            touch.y,
            touch.x_raw,
            touch.y_raw
          );

time:
  - platform: homeassistant
    id: homeassistant_time

font: 
  # gfonts://family[@weight]
  - file: "gfonts://Mukta@700"
    id: large_text
    size: 38
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z','å', 'ä', 'ö', '/']    

  # gfonts://family[@weight]
  - file: "gfonts://Roboto@400"
    id: energy_text
    size: 18

  # gfonts://family[@weight]
  - file: "gfonts://Roboto@400"
    id: price_text
    size: 22

  # gfonts://family[@weight]
  - file: "gfonts://Source+Sans+Pro@400"
    id: small_text
    size: 10

color:
  - id: my_grey
    red: 30%
    green: 30%
    blue: 30%
    white: 50%

  # #000000
  # 0,0,0
  - id: COLOR_CSS_BLACK
    red:   0.0000
    green: 0.0000
    blue:  0.0000
    white: 0.0000

  # #800000
  # 128,0,0
  - id: COLOR_CSS_MAROON
    red:   0.5020
    green: 0.0000
    blue:  0.0000
    white: 0.0000

  # #ff0000
  # 255,0,0
  - id: COLOR_CSS_RED
    red:   1.0000
    green: 0.0000
    blue:  0.0000
    white: 0.0000

  # #ffa500
  # 255,165,0
  - id: COLOR_CSS_ORANGE
    red:   1.0000
    green: 0.6471
    blue:  0.0000
    white: 0.0000


  # #adff2f
  # 173,255,47
  - id: COLOR_CSS_GREENYELLOW
    red:   0.6784
    green: 1.0000
    blue:  0.1843
    white: 0.0000

  # #008000
  # 0,128,0
  - id: COLOR_CSS_GREEN
    red:   0.0000
    green: 0.5020
    blue:  0.0000
    white: 0.0000

  # #006400
  # 0,100,0
  - id: COLOR_CSS_DARKGREEN
    red:   0.0000
    green: 0.3922
    blue:  0.0000
    white: 0.0000

  # #f5f5f5
  # 245,245,245
  - id: COLOR_CSS_WHITESMOKE
    red:   0.9608
    green: 0.9608
    blue:  0.9608
    white: 0.0000

# "Icons made by Freepik from www.flaticon.com"
image:
  - file: "solar_energy32.png"
    id: solar_power
    type: RGB
    #resize: 32x32
  - file: "electrical_tower32.png"
    id: grid_power
    type: RGB
    #resize: 32x32

# Define sensors in HomeAssistant that we use for display
sensor:
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    id: wifi_sig
    update_interval: 300s

  # Current import (unit is W - if you meter is using kW then it needs conversion)
  - platform: homeassistant
    id: import_el
    entity_id: sensor.p1_meter_power

  # Utility meter template in HomeAssistant. See example below (goes into configuration.yaml in HA.)  
  - platform: homeassistant
    id: consumption_today
    entity_id: sensor.kamstrup_daily_kwh

  # // From EnergiDataServive, but you can also use Tibber, Nordpool etc.
  - platform: homeassistant
    id: price_now
    entity_id: sensor.energi_data_service
    attribute: current_price

  # Template sensor which fetches the max today price from EnergiDataService
  - platform: homeassistant
    id: eds_max  
    entity_id: sensor.energy_max_price

  # Utility meter that calculates the daily cost of electricity
  - platform: homeassistant
    id: daily_charge
    entity_id: sensor.dailyelectricitycost

  - platform: uptime
    name: Uptime Sensor 

  # Example:
  # utility_meter:
  # produktion_huset_per_dag:
  #   source: sensor.cumulative_active_export
  #   cycle: daily

  - platform: internal_temperature
    name: "Internal Temperature"

button:
  - platform: restart
    name: "Restart"   
    
text_sensor:
  - platform: homeassistant   # Energi Data Service
    id: eds_today
    entity_id: sensor.energi_data_service
    attribute: today
  - platform: homeassistant   # Energi Data Service
    id: eds_tomorrow
    entity_id: sensor.energi_data_service
    attribute: tomorrow

  # Number is used, so that values can be changed from HA without re-compiling. Numbers will go back to default in case of reboot, though
number:
  - platform: template
    id: VERY_CHEAP
    name: "02_VERY_CHEAP"
    optimistic: true
    min_value: -5
    max_value: 10
    step: 0.01
    restore_value: true
#    initial_value: 0.59
    initial_value: 0.5
  - platform: template
    name: "04_CHEAP"
    id: CHEAP
    optimistic: true
    min_value: -5
    max_value: 10
    step: 0.01
    restore_value: true
    # initial_value: 1.0
    initial_value: 0.9
  - platform: template
    name: "06_NORMAL"
    id: NORMAL
    optimistic: true
    min_value: -5
    max_value: 10
    step: 0.01
    restore_value: true
    #initial_value: 1.6
    initial_value: 1.54
  - platform: template
    name: "08_EXPENSIVE"
    id: EXPENSIVE
    optimistic: true
    min_value: -5
    max_value: 10
    step: 0.01
    restore_value: true
    # initial_value: 2.2
    initial_value: 2.0
  - platform: template
    name: "10_VERY_EXPENSIVE"
    id: VERY_EXPENSIVE
    optimistic: true
    min_value: -5
    max_value: 10
    step: 0.01
    restore_value: true
    # initial_value: 3.00
    initial_value: 2.80
  - platform: template
    name: "12_EXTREMELY_EXPENSIVE"
    id: EXTREMELY_EXPENSIVE
    optimistic: true
    min_value: -5
    max_value: 10
    step: 0.01
    restore_value: true
    # initial_value: 4.0
    initial_value: 3.7

  # Text is used, so that values can be changed from HA without re-compiling. Strings will go back to default in case of reboot, though
text:
  - platform: template
    id: BELOW_VERY_CHEAP_TEXT
    name: "01_BELOW_VERY_CHEAP_TEXT"
    min_length: 3
    max_length: 13 
    mode: text
    optimistic: true
    restore_value: true
    initial_value: "Vildt billigt"
  - platform: template
    name: "03_VERY_CHEAP_TEXT"
    id: VERY_CHEAP_TEXT
    min_length: 3
    max_length: 13 
    mode: text
    optimistic: true
    restore_value: true
    initial_value: "Meget billigt"
  - platform: template
    name: "05_CHEAP_TEXT"
    id: CHEAP_TEXT
    min_length: 3
    max_length: 13 
    mode: text
    optimistic: true
    restore_value: true
    initial_value: "Billigt"
  - platform: template
    name: "07_NORMAL_TEXT"
    id: NORMAL_TEXT
    min_length: 3
    max_length: 13 
    mode: text
    optimistic: true
    restore_value: true
    initial_value: "Normalt"
  - platform: template
    name: "09_EXPENSIVE_TEXT"
    id: EXPENSIVE_TEXT
    min_length: 3
    max_length: 13 
    mode: text
    optimistic: true
    restore_value: true
    initial_value: "Dyrt"
  - platform: template
    name: "11_VERY_EXPENSIVE_TEXT"
    id: VERY_EXPENSIVE_TEXT
    min_length: 3
    max_length: 13 
    mode: text
    optimistic: true
    restore_value: true
    initial_value: "Meget dyrt"
  - platform: template
    name: "13_EXTREMELY_EXPENSIVE_TEXT"
    id: EXTREMELY_EXPENSIVE_TEXT
    min_length: 3
    max_length: 13 
    mode: text
    optimistic: true
    restore_value: true
    initial_value: "Vildt dyrt"

display:
  - platform: qspi_dbi
    model: axs15231
    data_rate: 40MHz
    id: mydisplay
    spi_id: display_qspi
    dimensions:
      height: 480
      width: 320
    cs_pin: 45
    rotation: 0 # 90 for landscape, 0 for portrait
    update_interval: never
    auto_clear_enabled: true
    #show_test_card: true # must enable update_interval, auto_clear_enable

    pages:
      - id: page1
        lambda: |-

          static PowerDisplay powerDisplay;
  
          // Unit is W - if your meter is reporting kW then it needs conversion (multiply value by 1000)
          //powerDisplay.SetCurrentPower((id(import_el).state - id(export_el).state));  // Use if using solar production
          // powerDisplay.SetCurrentPower(((id(import_el).state)*1000));  // Use if not using any solar production
          powerDisplay.SetCurrentPower(((id(import_el).state)));  // Use if not using any solar production

          powerDisplay.SetTodayDailyCharge(id(daily_charge).state);  // Use if you have a sensor with the accumulated cost for today from Tibber

          powerDisplay.SetCurrentPrice(id(price_now).state);
          powerDisplay.SetTodayMaxPrice(id(eds_max).state);
          powerDisplay.SetTodayDailyCharge(id(daily_charge).state);
          powerDisplay.SetTodaysPrices(id(eds_today).state);
          powerDisplay.SetTomorrowsPrices(id(eds_tomorrow).state);
          powerDisplay.WriteDailyEnergy(id(consumption_today).state);
          powerDisplay.DisplayIcons(&it, 10, 10);                                   // Display size dependant
          powerDisplay.WritePowerText(&it, 160, 40);                                // Display size dependant - title of graph
          powerDisplay.WriteDailyAmount(&it, 160, 75, id(COLOR_CSS_WHITESMOKE));    // Display size dependant
          powerDisplay.CreateGraph(&it, 15, 115, 300, 260, my_grey);                // Display size dependant - -x, y, width, height
          powerDisplay.SetGraphScale(0, 96, 0);                                     // Display size dependant - xMin, xMax, yMin
          powerDisplay.SetGraphGrid(&it, 0, 2, 0, 1, my_grey);                      // Display size dependant - xLow, xInterval, yLow, yInterval, Color
          powerDisplay.SetPrices("today");                                          // Convert data from sensor to "workable" data
          powerDisplay.SetPrices("tomorrow");                                       // Convert data from sensor to "workable" data
          powerDisplay.WriteTimeLine(&it, id(homeassistant_time).now().hour, id(homeassistant_time).now().minute, id(COLOR_CSS_WHITESMOKE)); // Vertical bar to indicate current time
          powerDisplay.DrawPriceGraph(&it);                                         // Draw graph 
          powerDisplay.WritePriceText(&it, 160, 457);                               // Display size dependant

      - id: page2
        lambda: |-

          static PowerDisplay powerDisplay;

          powerDisplay.SetCurrentPrice(id(price_now).state);
          powerDisplay.SetTodayMaxPrice(id(eds_max).state);
          powerDisplay.SetTodayDailyCharge(id(daily_charge).state);
          powerDisplay.SetTodaysPrices(id(eds_today).state);
          powerDisplay.SetTomorrowsPrices(id(eds_tomorrow).state);
          powerDisplay.WriteTomorrowText(&it, 160, 40);                             // Display size dependant
          powerDisplay.CreateGraph(&it, 15, 115, 300, 260, my_grey);                // Display size dependant - -x, y, width, height
          powerDisplay.SetGraphScaleTomorrow(0, 96, 0);                             // Display size dependant
          powerDisplay.SetGraphGrid(&it, 0, 2, 0, 1, my_grey);                      // Display size dependant
          powerDisplay.WritePriceInfo(&it, 160, 75);                                // Display size dependant
          powerDisplay.SetPrices("today");
          powerDisplay.SetPrices("tomorrow");
          powerDisplay.DrawPriceGraphTomorrow(&it);

interval:
  - interval: 5s
    then:
      - display.page.show_next: mydisplay
      - component.update: mydisplay



